<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络（一） 概论</title>
    <link href="/2022/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C(%E4%B8%80)%20%E6%A6%82%E8%AE%BA/"/>
    <url>/2022/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C(%E4%B8%80)%20%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><blockquote><p>主要根据郑栓、杨坚的计算机网络公开课程，进行笔记攥写。 课程教材：计网黑皮书第7版</p></blockquote><p>​计算机网络通过对网络进行分层设计，将一个庞大而复杂的系统，模块化层次化，（大致分层如图所示 ） 其中的每个层次为其上层提供特定的服务内容，并使用来自下层的特定功能， 各个层次中明确了其需要实现的内容，但并不指明其中具体的实现方式。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027122949653.png" alt="计算机网络层级结构" style="zoom: 33%;" /></p><h2 id="internet">Internet</h2><p><code>Internet</code>也叫“网络的网络”,即把多个网络结构连接成更大的网络（套娃）。</p><h3 id="internet标准">Internet标准</h3><p>互联网的标准是以 IETF 发布的 RFC 的文档的形式</p><ul><li><p><strong>RFC</strong>(Request for comments) 请求评述</p></li><li><p><strong>IETF</strong>（Internet Engineering TaskForce）互联网工程任务组</p></li><li><p>关于互联网的演化和进步，你有任何新的想法，都可以向 IETF提交文档，该组织是一个非盈利的。他们收到文档之后，会内部讨论一下，如果文档是靠谱的，给他编个号，放在他的网站上。让全球的科学家和工程师对她请求评述。</p></li><li><p>互联网所有的这些标准都是以 RFC 文档的形式在 IETF的网站上发布的，包括 TCP、 UDP、IP，所有的协议都是这么做的。大家共同建设互联网，共同促进互联网的发展，群策群力地构建一个互联网。所以说互联网的构建方式，和某个标准化机构主导制定的一些标准是不一样。</p></li></ul><h3 id="从构成叫角度阐释">从构成叫角度阐释</h3><p>​抽象上理解，互联网由节点、边、协议三要素构成，可以草率的理解成一个图的点、边、权值。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027085911763.png" alt="Internet结构图" style="zoom:50%;" /></p><p>节点：</p><ul><li><strong>主机节点</strong>：<strong>主机（端系统）</strong>以及其上运行的<strong>应用程序</strong>，比如：PC、服务器、手机等</li><li><strong>数据交换节点</strong>：<strong>路由器</strong>、<strong>交换机</strong>等网络交换设备（上图中的圆东西）</li></ul><p>边（<strong>通信链路</strong>）：</p><ul><li><strong>接入网链路</strong>： 主机连接到互联网的链路</li><li><strong>主干链路</strong>： 路由器之间的连接的链路<br /></li><li><strong>传输速率</strong> = <strong>带宽（bps）</strong>（bit persecond 每秒传输的字节）</li><li>常见的有 光纤、同轴电缆、无线电、卫星等</li></ul><p>协议：</p><ul><li><strong>标准定义：对等层实体，在通信过程当中，应该遵守的规则的集合，包括了语法、语义和时序</strong>。通俗来讲就是”规则“。如下图中的<code>TCP</code>请求、响应过程，与人类社交要前先到好的习惯相似。<em>注意，并不是所有的协议都有连接请求、响应过程。</em><ul><li>对等实体指不同开放系统上同一层中的实体。如一个服务器IP和另一个服务器IP；一个网卡跟另一个相邻网络的网卡等</li></ul></li><li>协议控制收发消息，如TCP、IP、HTTP、FTP、PPP</li></ul><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027085710436.png" alt="人类协议与网络协议对比" style="zoom: 50%;" /></p><h3 id="从服务角度阐释">从服务角度阐释</h3><p>从服务的角度来看，互联网是<strong>分布式的应用进程</strong>，以及为分布式应用进程提供通信服务的<strong>基础设施</strong>。</p><h4 id="分布式应用">分布式应用</h4><p>分布式应用是各种提供服务的网络应用(Web、 email、 分布式游戏等)。应用程序分布在不同的主机上，借助网络共同完成一项任务。可以说它是互联网存在的理由，一切网络都是为之服务的。</p><h4 id="基础设施">基础设施</h4><p>在应用层以下的所有协议实体、网络，即除了应用的一切都可纳为<strong>基础设施</strong>。</p><p>基础设施向应用进程提供服务的方式有两种：</p><ul><li>面向连接的服务。（如：<code>TCP</code>），<em>注意：面向连接有别于有连接</em></li><li>无连接的服务。</li></ul><h3 id="网络结构">网络结构</h3><p>​以上我们主要从构成和服务的角度对互联网进行剖分，特别的，从结构的角度分析，互联网可以分为以下三个部分，后面会逐一对其做出详细的阐述：</p><ul><li>网络边缘：包含主机和应用程序(客户端和服务器)</li><li>网络核心：互连着的路由器，网络的网络</li><li>接入网、物理媒体：有线或者无线通信链路</li></ul><h2 id="网络边缘">网络边缘</h2><p>​处在Internet边缘部分的东西就是主机，而这些主机又称为端系统。在不同应用进程之间的通讯模式，可以分为客户/服务器（C/S）模式和对等（Pear-Pear）模式。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027102953289.png" alt="端到端通讯模式" style="zoom:50%;" /></p><h3 id="cs模式和p2p模式">C/S模式和P2P模式</h3><h4 id="cs-分布式模式">C/S 分布式模式</h4><p>​C是指Client，S是指Server，C/S模式就是计算机软件协同工作的一种模式，通常采取两层结构。服务器负责数据的管理，客户机负责完成与用户的交互任务。</p><p>​比如，发Email过程中，我的邮箱app是客户端，处理邮件的服务器是服务端。服务器首先在运转、守候在端口等待用户资源请求，收到请求后向客户提供服务。</p><p>​这是一种很典型的<strong>主从模式</strong>，主指服务器，因为所有资源都在服务器哪里，从指可乎，因为它请求的所有资源都来自于服务器。</p><p><strong>缺点</strong></p><p>​<strong>可拓展性差</strong>：当客户端请求量增多，我们就要多搞几台服务器，弄成一个服务器农场。但服务器一多，周围链路也相应增加，同时服务器载荷过大容易造成宕机，一旦宕机，所有服务器都die了。</p><p>​</p><h4 id="p2p模式">P2P模式</h4><p>​此P2P的P指的是Peer，指对等体，区别于借贷中的p2p（person）。其指的是每个人节点都可以可以从别人那里获得数据，同时也可以提供数据给他人，”我为人人，人人为我“。</p><p>​ 以迅雷下载为例</p><ul><li>一开始大家都是通过 FTP 去分发文件，大家把文件上载到 FTP服务器文件服务器，向 ftb 的客户端提供服务，这是典型的 CS 模式。</li><li>后来，服务器扩容满足不了客户请求时，产生了p2p模式。比如我下载一份文件，文件有3个片段。在该模式下，我向peer节点请求文件片段，三条路一起下载，最后整合成一个完整文件。</li><li>这样的好处是大大降低了服务器的载荷，同时随着用户的增多，我们只需支付一点点损耗就能得到较大的获利，让网络运行更加健康。</li></ul><h3 id="通信服务">通信服务</h3><p>​不论是何种模式，都需要借助基础设施提供的通信服务才能实现其功能。通讯服务的目标是实现<strong>在端系统之间传输数据</strong>。</p><h4id="采用网络设施的面向连接服务tcp">采用网络设施的面向连接服务——TCP</h4><p>TCP - 传输控制协议（Transmission ControlProtocol），是Internet上面向连接的服务。</p><p>借助TCP协议实体向应用进程提供服务时，需要先<strong>握手</strong>，也就需要先双方打好招呼，建立利好连接，准备好相应资源后再进行通讯。（即上文提到的连接请求、相应）</p><p><strong>特点</strong>：</p><ul><li><strong>可靠性（RDT 可靠的传输协议 reliable data transfer）</strong></li></ul><p>”可靠“指的是”不重复，不丢失，不出错，不失序“。也就是说对方下发送的东西，可以原原本本的送到接收方手中。</p><p>相应的，TCP需要经过一系列繁杂的操作来保证传输的可靠，一定程度上在时间上做出了牺牲。</p><ul><li><strong>流量控制</strong></li></ul><p>TCP可以通过流量控制，协调发送和接受的速度，保证不让发送方发送速度过快以至于淹没接收方的处理能力。</p><ul><li><strong>拥塞控制</strong></li></ul><p>当网络发生拥塞时，会降低发送方的发送速率。</p><h4 id="采用基础设施的无连接服务-udp">采用基础设施的无连接服务 ——UDP</h4><p>UDP——用户数据报协议（User Datagram Protocol）</p><p><strong>特点</strong></p><ul><li>无连接<ul><li>无连接指两个应用进程之间通信不需要事先”握手“，直接合规的UDP报文出去，另一个进程收到后马上回答。</li></ul></li><li>不可靠的数据传输<ul><li>UDP只需要保证数据发出去就行了，丢了就丢了，再传一份就好</li></ul></li><li>无流量、无拥塞控制</li></ul><p>相较于TCP而言，UDP看起来似乎非常”不靠谱“。但对于实时多媒体应用、网络直播等应用，可能难以接受TCP因可靠而带来的时间上的损耗，而又不太关注传输过程中UDP带来的丢失。</p><h2 id="网络核心">网络核心</h2><p><strong>网络核心</strong>：由路由器连接构成的网络。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027105406193.png" alt="网络核心示意图" style="zoom: 67%;" /></p><p>在网络核心上，有两种方式进行数据的传输</p><ul><li><strong>电路交换</strong><ul><li>为每个呼叫预留一条<strong>专有电路</strong>：如电话网。一个人在用的时候别人不能接入。</li></ul></li><li><strong>分组交换</strong><ul><li>分组：将要传送的数据切分成一个个单位。</li><li>将分组从一个路由器传到相邻路由器（hop），一段一段地最终从源端传到目标端。</li><li>每一段传输的过程中都采用链路的最大传输能力（带宽）。</li></ul></li></ul><p>我们互联网和几乎所有的网络都是采用的分组交换，电路交换起来基本上可能是用于电话网。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027181304518.png" alt="网络分类" style="zoom: 33%;" /></p><h3 id="电路交换">电路交换</h3><blockquote><p>ppt好详细，就不打字了，太累了。</p></blockquote><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027110057945.png" alt="电路交换" style="zoom:33%;" /></p><p><strong>电路交换为呼叫预留端</strong>-端资源</p><ul><li>链路带宽、交换能力</li><li>专用资源：不共享（no sharing）</li><li>保证性能</li><li>需要建立呼叫连接</li></ul><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027123240558.png" alt="电路交换建立连接示意图" style="zoom:50%;" /></p><h4 id="fdm-tdm-wdm">FDM &amp; TDM &amp; WDM</h4><p>​在网络通信的过程之中，网络资源（带宽bps）被切分为<strong>片</strong>（piece），网络核心会自动为一个呼叫分配片，但连接建立后某个呼叫没有数据，则其资源片会处于<strong>空闲状态</strong>（但不共享）。这可能会造成资源上的极大浪费，影响网络通信效率，但该问题在“分组交换”中一定程度上会得以解决。</p><p>​ 将带宽切分为篇的方式主要有如下几种：</p><ul><li>频分（FDM — Frequency-division multiplexing）</li><li>时分（TDM — Time-division multiplexing）</li><li>波分（WDM — Wave-division multiplexing）</li><li>码分（CDMA）</li></ul><p>这里着重介绍频分和时分，在后面章节会对其他复用技术进行讲解。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027124400209.png" alt="FDM & TDM" style="zoom:50%;" /></p><p>​</p><ul><li><strong>FDM：</strong>频分多路复用通过将带宽按照不同频率进行切分，两个主机通信之前会在每一条链路上找出一片空闲的频率进行通信。同一时间最多可以同时跑n条路，但每条路的数据传递效率变成了<span class="math inline">\(\frac{带宽}{段数}\)</span>。</li><li><strong>TDM：</strong>时分多路复用即按照时间进行切片。首先将通信能力分解成一个个<strong>周期</strong>，每一个周期内在分为若干个<strong>时隙</strong>。这样某一段通信进行的时候可以完全享受全部带宽的速率，其代价是时间上不连续。</li><li><strong>WDM：</strong>就是采用光纤通信。他们之间是采用光纤的方法连在一起。把它们之间的可用的<strong>波段</strong>，可以分为若干个小的波段，每个用户使用其中的一个小波段，类比频分。</li></ul><p><strong>举个栗子</strong></p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027130312040.png" alt="image-20221027130312040" style="zoom: 33%;" /></p><h4 id="电路交换不适于网络通信">电路交换不适于网络通信</h4><p>​由于电路交换的各种特性，使得其无法很好的在网络通信上发挥有很好的功效。</p><p>​<strong>首先，线路交换需要较长的练习时间</strong>，比如两个通讯建立连接需要500ms，而通讯过程只有1ms，对于计算机而言其效率过于低下。</p><p>​<strong>其次，计算机通讯具有很强的突发性，</strong>大多数的通讯过程中由许多时间都是无数据传递的，这也造成了大量的资源浪费。而且线路建立以后不传递数据，运营商也是会收你钱的。</p><p>​<strong>最后，可靠性不高</strong>，一个线路连接的交换机，需要维护很多piece到piece之间的映射关系。在通常的网络交换设备中，会达到10万级的关系维护，一旦一个宕机了，就都GG了。所以，以此方式建立的网络结构，核心节点被攻击摧毁，对主机通信的影响就会相当之大。</p><h3 id="分组交换">分组交换</h3><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027130357641.png" alt="分组交换" style="zoom: 33%;" /></p><p>分组交换将主机间通信的数据分成一个一个<strong>组(pocket)</strong>，并以组为单位进行<strong>存储-转发</strong>，每次移动为一<strong>跳（hop）</strong>。节点间通信的时候不再切分piece而是使用全部带宽进行数据传输，当一个节点收到全部分组（存储）后再跳到下一个节点（转发）。</p><p>自然的，不同数据再同一个节点处会进行一次<strong>“排队”</strong>，有序的使用网络资源，虽然会造成比线路交换更多的延迟时间，但却换来了<strong>资源共享</strong>的优点。在分组传递时，只有有数据的时候才会占用网络资源，没有的话就不占用，而这大大减提高了资源的有效利用率。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027132248251.png" alt="存储-转发" style="zoom: 33%;" /></p><p><strong>排队延迟的丢失</strong></p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027132348482.png" alt="排队延迟和丢失" style="zoom:33%;" /></p><p>​ 如果$v_{到达} &gt; v_{传输}$，那么分组就会排队，等待传输（<strong>排队延迟</strong>）；如果路由器的缓存用完了（队满）分组将会被丢弃（<strong>分组丢失</strong>）。</p><p><strong>补充：网络核心的关键功能</strong></p><p>对于分组交换网络而言，网络的核心最主要的作用有两个，转发和路由。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027132858900.png" alt="image-20221027132858900" style="zoom:33%;" /></p><p>路由是全局的，转发是局部的。</p><p>路由实体通过运行中的路由模块与其他路由器交换路由信息，得出路由表。分组交换机存下分组后，查询路由表决定从哪条链路进行转发。</p><p>通过局部转发和全局路由的配合，最终实现了一个数据交换的网络。宏观上来看，源主机把分组发出去，目标主机瞬间收到层层路由传输过来的数据。</p><h4 id="统计时分多路复用stdm">统计时分多路复用（STDM）</h4><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027135619356.png" alt="image-20221027135619356" style="zoom:50%;" /></p><p>统计时分多路复用又叫“异步时分多路复用”，该复用的特点是动态分配信道时隙，又可以叫做“动态复用”。</p><p>它在传统时分多路复用的基础上，把公共信道的时隙实行“按需分配”，只对那些需要传送的信息或正在工作的终端才分配给时隙，这样就可以保证所有的时隙都能饱满的使用，可以使服务端数大于时隙个数，提高媒介传输效率，又起到“复用的技术”。该技术为传统效率的2-4倍。</p><h4 id="分组交换网络-存储-转发">分组交换网络： 存储-转发</h4><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027174422776.png" alt="image-20221027174422776" style="zoom: 33%;" /></p><h5 id="数据报网络">数据报网络</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027174644233.png" alt="image-20221027174644233" style="zoom:33%;" /></p><p>在数据报网络中，两个主机通讯前<strong>不需要握手</strong>，每个分组的传递都是<strong>独立</strong>的，交换节点（路由器）不用维护通讯状态。在源主机给目标主机的分组中<strong>携带了目标主机的地址</strong>，在每个交换节点接收到分组（pocket）后根据其所携带的目标地址进行<strong>存储、转发</strong>。</p><p>这个过程可以类比成“寄信”，在上面写上目标地址，送信公司收到后进行存储，再由送信员对每个信件单独处理，送到目标地点。</p><h5 id="虚电路网络">虚电路网络</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221027175733911.png" alt="虚电路网络示意图" style="zoom: 33%;" /></p><blockquote><p>解读：</p><p>每个节点都分成左右两大列，左边表示输入右边（从哪来）表示输出（要去哪）。输出输出部分又有两列，字母表示节点号，数字代表该节点的几号虚电路。</p></blockquote><p>虚电路像打电话一样。</p><ul><li>在主机间通讯之前需要先“握手”，在交换节点间建立起<strong>虚拟的线路</strong>，保持通信状态。</li><li>建立起虚拟虚拟线路后，每个分组都携带一个虚电路号而非目标主机的完整地址。</li><li>每个分组按照序列号标识到每个交换节点的时候决定接下来往哪走。（如上图所示）</li></ul><p>笔者认为，虚电路像是告诉了你一步一步该怎么走，但不告诉你走到哪；而数据包网络像是告诉你要走到哪，你每到一个地方就考虑接下来走哪目标位置。</p><h2 id="接入网物理媒介">接入网、物理媒介</h2><h2 id="internetisp结构">Internet/ISP结构</h2><blockquote><p>感谢您能看到最后，本人纯小白，但酷爱叨叨，如果犯了错误，还望看官大佬指正，本人定积极学习改正。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一些教程整理</title>
    <link href="/2022/10/25/%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/"/>
    <url>/2022/10/25/%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="机器学习">机器学习</h2><ol type="1"><li>吴恩达机器学习教程<ul><li><ahref="https://www.bilibili.com/video/BV1Pa411X76s/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3c4101f565833148e1dc473d47e062f9">(强推|双字)2022吴恩达机器学习Deeplearning.ai课程_哔哩哔哩_bilibili</a></li></ul></li></ol><h2 id="深度学习">深度学习</h2><ol type="1"><li>解析卷积神经网络 - 魏秀参 （中文快速入门）<ul><li><ahref="http://www.lamda.nju.edu.cn/weixs/book/CNN_book.html">《解析深度学习——卷积神经网络原理与视觉实践》（开源电子版）(nju.edu.cn)</a></li></ul></li><li>李沐动手系列：<ul><li>课程入口：<a href="https://courses.d2l.ai/zh-v2/">课程安排 -动手学深度学习课程 (d2l.ai)</a></li><li>课程资源：<ahref="https://github.com/1suancaiyu/d2l-zh">1suancaiyu/d2l-zh:《动手学深度学习》：面向中文读者、能运行、可讨论。中英文版被全球200所大学采用教学。(github.com)</a></li><li>B站主页：<ahref="https://space.bilibili.com/1567748478/channel/series">跟李沐学AI的个人空间_哔哩哔哩_bilibili</a></li></ul></li><li>吴恩达深度学习<ul><li>[<ahref="https://www.bilibili.com/video/BV1FT4y1E74V/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3c4101f565833148e1dc473d47e062f9">双语字幕]吴恩达深度学习deeplearning.ai_哔哩哔哩_bilibili</a></li><li></li></ul></li></ol><h2 id="计算机视觉">计算机视觉</h2><ol type="1"><li>斯坦福公开课 CS231n<ul><li>B站视频：<ahref="https://www.bilibili.com/video/BV1nJ411z7fe/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3c4101f565833148e1dc473d47e062f9">【公开课】最新斯坦福李飞飞cs231n计算机视觉课程【附中文字幕】_哔哩哔哩_bilibili</a></li><li>课程官网：<ahref="http://cs231n.stanford.edu/schedule.html">Stanford UniversityCS231n: Deep Learning for Computer Vision</a></li></ul></li><li>双目视觉之三维重建<ul><li><ahref="https://www.bilibili.com/video/BV1DP41157dB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3c4101f565833148e1dc473d47e062f9">2022B站最好最全的【三维重建】课程！！！北邮教授竟然把三维重建讲的如此通俗易懂，学不会UPZHIJIE退网下架！！！-人工智能/计算机视觉/三维重建_哔哩哔哩_bilibili</a></li></ul></li></ol><h2 id="自然语言处理">自然语言处理</h2><ol type="1"><li>斯坦福公开课 CS224n<ul><li>B站视频：<ahref="https://www.bilibili.com/video/BV1pt411h7aT/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3c4101f565833148e1dc473d47e062f9">【官方】【中英】CS224n斯坦福深度自然语言处理课 <span class="citation"data-cites="雷锋字幕组_哔哩哔哩_bilibili">@雷锋字幕组_哔哩哔哩_bilibili</span></a></li><li>课程官网：<a href="http://web.stanford.edu/class/cs224n/">StanfordCS 224N | Natural Language Processing with Deep Learning</a></li></ul></li></ol><h2 id="计算机网络">计算机网络</h2><ol type="1"><li>中科大线下录播课程<ul><li><ahref="https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3c4101f565833148e1dc473d47e062f9">中科大郑烇、杨坚全套《计算机网络（自顶向下方法第7版，James F.Kurose，Keith W.Ross）》课程_哔哩哔哩_bilibili</a></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2022/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="绪论">绪论</h2><h3 id="数据结构基本概念">数据结构基本概念</h3><p><strong>数据</strong>：数据可分类为整数、实数等<strong>数值数据</strong>，和文字、声音、图形、图像等<strong>非数值数据</strong>。</p><p><strong>数据元素</strong>：数据元素是数据的基本单位，通常作为一个整体进行处理。构成数据元素的最小单位称为<strong>数据项</strong>，并且数据元素通常具有相同的数据项。</p><blockquote><p>例如：一个学生是一个数据元素，学生的学号、性别、出生日期等是构成该数据元素的数据项。</p></blockquote><p><strong>数据结构</strong>：数据结构是指相互之间存在一定关系的元素集合。按照视点的不同，数据结构可分为<strong>逻辑结构</strong>和<strong>存储结构</strong>两类。</p><blockquote><p>强调：数据元素是数据结构的最小单位。</p></blockquote><p><strong>数据的逻辑结构</strong>：指数据元素之间的逻辑关系，根据元素之间的逻辑关系的不同，数据结构可分为四类。</p><ul><li><strong>集合元素</strong>：除“同属一个集合”外，数据间无关系。</li><li><strong>线性结构</strong>：一对一</li><li><strong>树结构</strong>：一对多</li><li><strong>图结构</strong>：多对多</li></ul><p><strong>数据的存储结构</strong>：也称物理结构，是数据及其逻辑形式在计算机中的表示（也称映像）。可分为顺序存储结构和链式存储结构。</p><ul><li><strong>顺序存储结构</strong>：用一组连续的存储单元，依次存储数据元素</li><li><strong>链式存储结构</strong>：用一组任意的存储单元存储数据元素，数据元素之间的关系用指针来表示。</li></ul><p><strong>抽象数据类型</strong>：(abstract datatype,ADT)是一个数据模型以及定义在该模型上一组操作的总称。一个ADT帝国一不涉及具体实现细节，形式上可繁可简。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erlang">ADT 抽象数据类型名<br>DataMode1<br>数据元素之间的逻辑关系的定义<br>Operation<br>操作<span class="hljs-number">1</span>：<br>输入：<br>功能：<br>输出：<br>    操作<span class="hljs-number">2</span>：<br>    .<br>    .<br><span class="hljs-keyword">end</span>ADT<br><br></code></pre></td></tr></table></figure><h2 id="线性表">线性表</h2><h3 id="顺序存储结构">顺序存储结构</h3><h3 id="链式存储结构单链表为例">链式存储结构(单链表为例)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">//设置结点</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    T date;<br>    Node&lt;T&gt;* next;<br>&#125;;<br><br><span class="hljs-comment">// 创建链表类</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chained_linear_list</span><br>&#123;   <br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Chained_linear_list</span>();<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, T x)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find_index</span><span class="hljs-params">(T value)</span></span>;<br>        <span class="hljs-function">T <span class="hljs-title">Find_value</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>;  <span class="hljs-comment">//查找第一个</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete_value</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>; <span class="hljs-comment">//删除第i个结点</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete_index</span><span class="hljs-params">(T value)</span></span>;   <span class="hljs-comment">//删除第一个值为value的元素</span><br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">private</span>:<br>        Node&lt;T&gt;* head;<br>&#125;;<br><br><span class="hljs-comment">// 创建新链表</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Chained_linear_list</span>()&#123;<br>    head = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>    rear-&gt;next = head -&gt; next = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取链表长度</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">int</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Length</span>()&#123;<br>    <span class="hljs-keyword">if</span>(head -&gt; next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    Node&lt;T&gt;* s = head-&gt;next;<br>    <span class="hljs-keyword">while</span>(s != <span class="hljs-literal">nullptr</span>)&#123;<br>        j++;<br>        s = s-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>    <br>&#125;<br><br><span class="hljs-comment">// 判断链表是否为空</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">bool</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">IsEmpty</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Length</span>() == <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 返回元素对应的下标，没找到返回-1</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">int</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Find_index</span>(T x)&#123; <span class="hljs-comment">//返回下标 0~n,-1代表元素不存在或链表为空</span><br>    <span class="hljs-keyword">if</span>(head -&gt; next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    Node&lt;T&gt;* s = head -&gt; next;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s != <span class="hljs-literal">nullptr</span> &amp;&amp; s-&gt;date != x)&#123;<br>        s = s -&gt; next;<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> j;<br>    <br>&#125;<br><br><span class="hljs-comment">// 返回对应下标所表示的元素，没找到返回-1</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>T Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Find_value</span>(<span class="hljs-type">int</span> x)&#123; <span class="hljs-comment">// 返回下标位置x的元素值</span><br>    <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Length</span>() || x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 查找的下标大于数组长度，表明输入有误</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    Node&lt;T&gt;* s = head -&gt; next;<br>    <span class="hljs-keyword">while</span>(j &lt; x)&#123;<br>        j++;<br>        s = s-&gt;next;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> s-&gt;date;<br>&#125;<br><br><span class="hljs-comment">// 在指定元素位置插入元素</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">int</span> x,T value)&#123;<br><br>    Node&lt;T&gt;* s = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">IsEmpty</span>())&#123;<br>        s-&gt;date = value,<br>        s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)&#123;     <br>        s -&gt; next = head -&gt; next;<br>        head -&gt; next = s;<br>        s -&gt; date = value;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        s = head -&gt; next;<br>        <span class="hljs-keyword">while</span>(j &lt; x - <span class="hljs-number">1</span> &amp;&amp; s != <span class="hljs-literal">nullptr</span>)&#123;<br>            s = s -&gt; next;<br>            j++;<br>        &#125;<br>        Node&lt;T&gt;* p = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>        p -&gt; date = value;<br>        p -&gt; next = s -&gt; next;<br>        s -&gt; next = p;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Delete_value</span>(<span class="hljs-type">int</span> index)&#123;<br>    Node&lt;T&gt; *s = head -&gt; next;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Length</span>()) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 只有一个</span><br>        head -&gt; next  = s -&gt; next;<br>        <span class="hljs-built_in">free</span>(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(j &lt; index <span class="hljs-number">-1</span>)&#123;<br>        j++;<br>        s = s -&gt; next;<br>    &#125;<br>    Node&lt;T&gt;* p = s -&gt; next;<br>    s -&gt; next  = p-&gt;next;<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Delete_index</span>(T x)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">IsEmpty</span>()) <span class="hljs-keyword">return</span>;<br>    <br>    Node&lt;T&gt;* s = head -&gt; next;<br>    <span class="hljs-keyword">if</span>(s -&gt; date == x)&#123;<br>        head -&gt; next = s -&gt; next;<br>        <span class="hljs-built_in">free</span>(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">while</span>(s -&gt; next != <span class="hljs-literal">nullptr</span> &amp;&amp; s -&gt; next -&gt; date != x)<br>            s = s-&gt;next;<br>        <span class="hljs-keyword">if</span>(s -&gt; next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;T&gt; *p = s -&gt; next;<br>            s -&gt; next = p-&gt; next;<br>            <span class="hljs-built_in">free</span>(p);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Chained_linear_list&lt;<span class="hljs-type">int</span>&gt; *a = <span class="hljs-keyword">new</span> Chained_linear_list&lt;<span class="hljs-type">int</span>&gt;,*p = a;<br><br>    a -&gt; <span class="hljs-built_in">Insert</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>); <br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>() &lt;&lt; endl;<br>    a -&gt; <span class="hljs-built_in">Insert</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>); <br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>() &lt;&lt; endl;<br>    a -&gt; <span class="hljs-built_in">Insert</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>); <br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        cout &lt;&lt; p -&gt; <span class="hljs-built_in">Find_value</span>(i) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    a-&gt; <span class="hljs-built_in">Delete_index</span>(<span class="hljs-number">11</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        cout &lt;&lt; p -&gt; <span class="hljs-built_in">Find_value</span>(i) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <br>    &#125;<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="其他链表结构">其他链表结构</h3><h4 id="双向链表">双向链表</h4><h4 id="循环链表">循环链表</h4><h4 id="十字链表">十字链表</h4><h3 id="栈">栈</h3><h4 id="单调栈">单调栈</h4><h3 id="队列">队列</h3><h4 id="循环队列">循环队列</h4><h4 id="单调队列">单调队列</h4><h4 id="双端队列">双端队列</h4><h3 id="字串">字串</h3><h2 id="树">树</h2><h3 id="树的基本概念">树的基本概念</h3><ul><li>子树不相交</li><li>除根结点外，每个结点有且仅有一个父节点</li><li>一个n个结点的树有n-1条边</li></ul><p><strong>结点的度</strong>： 结点的子树个数。</p><p><strong>树的度</strong>： 所有结点中最大度数。</p><p><strong>叶子结点</strong>: 度为0的结点。</p><p><strong>父结点</strong>： 有子树的结点是其5子树的根节点的父结点。</p><p><strong>子结点</strong>： 与父结点对应。</p><p><strong>兄弟结点</strong>： 具有同一父亲的结点。</p><p><strong>路径与路径长度</strong>：一个结点到另一个结点的序列叫做路径。其包含的边数叫做长度。</p><p><strong>祖先结点</strong>：沿树根到某一结点路径上的所有结点都是该节点的祖先结点。</p><p><strong>子孙结点</strong>： 与祖先结点对应。</p><p><strong>节点的层次</strong>：规定根结点在第一层，往后任意结点层数都是其父结点层数+1。</p><p><strong>树的深度</strong>： 所有结点的最大层次。</p><h3 id="树的表示">树的表示</h3><p>对于一般的树(以三叉树为例)，如果有n个结点的话那么总共产生n-1条边，但于此同时，会有3n-(n-1)个指针域为空，造成空间的极大浪费。因此我们通常采用以下方法改进树的表示。</p><p>#### 儿子兄弟表示法</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20220908183629440.png" alt="image-20220908183629440" style="zoom:33%;" /></p><blockquote><p>容易发现，采用这种方法以后，其形状酷似二叉树，但却能够表示一般的多叉树。也就意味着我们可以通过二叉树的形式研究最大部分树的性质。</p></blockquote><h4 id="双亲表示法">双亲表示法</h4><h4 id="孩子表示法">孩子表示法</h4><h3 id="二叉树">二叉树</h3><h4 id="二叉树的形式">二叉树的形式</h4><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010155982.png" alt="image-20221025010155982" style="zoom:33%;" /></p><blockquote><p>注意： 完全二叉树最后一层一定是要左到右排中间不留空。</p></blockquote><h4 id="完全二叉树的性质特点">完全二叉树的性质特点</h4><ul><li><span class="math inline">\(第i层最大节点数为2^{i-1},i \geq1\)</span></li><li><span class="math inline">\(深度为k的二叉树最大结数为2^k-1,k \geq1\)</span></li><li><spanclass="math inline">\(对于以层序顺序存储的二叉树而言，第i个结点的左结点为2\timesi,右节点为 2\times i+1\)</span></li><li><spanclass="math inline">\(对于任何非空二叉树，n_0,n_1,n_2分别表示度为0,1,2的结点，那么存在关系:n_0= n_2 + 1\)</span></li><li><spanclass="math inline">\(二叉树与树是两种不同的数据结构：树的儿子是有序的（1、2、3、\cdots）,而二叉树的儿子仅有左右之分。\)</span></li></ul><h4 id="二叉树的存储结构">二叉树的存储结构</h4><h5 id="顺序存储结构-1">顺序存储结构</h5><p><strong>完全二叉树</strong>：</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010211079.png" alt="image-20221025010211079" style="zoom:50%;" /></p><p>​但对于一般的二叉树，我们可以将其补全成完全二叉树进行存储，但相应的，会造成大量的<strong>空间浪费</strong>。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010221103.png" alt="image-20221025010221103" style="zoom:33%;" /></p><h5 id="链式存储结构">链式存储结构</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010235442.png" alt="image-20221025010235442" style="zoom: 33%;" /></p><h4 id="二叉树的四种遍历方式">二叉树的四种遍历方式</h4><h5 id="先序遍历-根---左---右">先序遍历 (根 -&gt; 左 -&gt; 右)</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010248743.png" alt="image-20221025010248743" style="zoom:50%;" /></p><p><strong>递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-keyword">if</span>(BT)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,BT-&gt;Data); <span class="hljs-comment">// 可换成其他操作</span><br><span class="hljs-built_in">PreOrderTraversal</span>(BT-&gt;left);<br><span class="hljs-built_in">PreOrderTraversal</span>(BT-&gt;right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal3</span><span class="hljs-params">(BTree BT)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T = BT;<br>    Stack S = <span class="hljs-built_in">CreatStack</span>(MaxSize)<br>    <span class="hljs-keyword">while</span> (T || !<span class="hljs-built_in">IsEmpty</span>(S))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (T) <span class="hljs-comment">// 一路向左压栈</span><br>        &#123;<br>           <span class="hljs-built_in">Push</span>(S,T);<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, T -&gt; Data)<br>           T = T -&gt; left;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsEmpty</span>(S))<br>        &#123;<br>            T = <span class="hljs-built_in">Pop</span>(S); <span class="hljs-comment">//没有左子节点，就出栈</span><br>            T = T -&gt; Right; <span class="hljs-comment">// 左、根遍历完了。转向右子树</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="中序遍历-左---根---右">中序遍历 (左 -&gt; 根 -&gt; 右)</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010302033.png" alt="image-20221025010302033" style="zoom: 50%;" /></p><p><strong>递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-keyword">if</span>(BT)&#123;<br><span class="hljs-built_in">InOrderTraversal</span>(BT-&gt;left);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,BT-&gt;Data); <span class="hljs-comment">// 可换成其他操作</span><br><span class="hljs-built_in">InOrderTraversal</span>(BT-&gt;right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal3</span><span class="hljs-params">(BTree BT)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T = BT;<br>    Stack S = <span class="hljs-built_in">CreatStack</span>(MaxSize)<br>    <span class="hljs-keyword">while</span> (T || !<span class="hljs-built_in">IsEmpty</span>(S))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (T) <span class="hljs-comment">// 一路向左压栈</span><br>        &#123;<br>           <span class="hljs-built_in">Push</span>(S,T);<br>           T = T -&gt; left;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsEmpty</span>(S))<br>        &#123;<br>            T = <span class="hljs-built_in">Pop</span>(S); <span class="hljs-comment">//没有左子节点，就出栈</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, T -&gt; Data)<br>            T = T -&gt; Right; <span class="hljs-comment">// 左、根遍历完了。转向右子树</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="后序遍历左---右--根">后序遍历(左 -&gt; 右-&gt; 根 )</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010320504.png" alt="image-20221025010320504" style="zoom:50%;" /></p><p><strong>递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-keyword">if</span>(BT)&#123;<br><span class="hljs-built_in">PostOrderTraversal</span>(BT-&gt;left);<br><span class="hljs-built_in">PostOrderTraversal</span>(BT-&gt;right);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,BT-&gt;Data); <span class="hljs-comment">// 可换成其他操作</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><p>​从前、中序遍历的非递归实现可以知道，我们通过一个栈只能完成每个结点的两次访问。但对于后续遍历来说，我们对一个结点一定要进行三次访问左、根、右后才能进行输出。也因此操作起来比较复杂，题主结合网上资源给出三种非递归实现方式。</p><p><strong>方法一</strong>：</p><p>已知，有如下一颗树</p><p>​ 1</p><p>​ 2 3</p><p>​ 4 5 6 7</p><p>8 9 10 11</p><p>后序遍历为： 8 9 4 10 11 5 2 6 7 3 1</p><p>逆后续遍历为：1 3 7 6 2 6 11 10 4 9 8</p><p>观察可得，其逆后序遍历为该树通过根-&gt;右-&gt;左的次序进行“先序”遍历。因此我们可以按此先序遍历的方法遍历一遍得到你逆后序遍历再输出即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTraversal</span><span class="hljs-params">(BTree BT)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T = BT;<br>    Stack S = <span class="hljs-built_in">CreatStack</span>(MaxSize);<br>    Stack ans = <span class="hljs-built_in">CreatStack</span>(MaxSize);<br>    <span class="hljs-keyword">while</span> (T || !<span class="hljs-built_in">IsEmpty</span>(S))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (T) <span class="hljs-comment">// 一路向右压栈</span><br>        &#123;<br>           <span class="hljs-built_in">Push</span>(S,T);<br>           <span class="hljs-built_in">Push</span>(ans,T-&gt;ans);<br>           T = T -&gt; Right;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsEmpty</span>(S))<br>        &#123;<br>            T = <span class="hljs-built_in">Pop</span>(S); <span class="hljs-comment">//没有右子节点，就出栈</span><br>            T = T -&gt; left; <span class="hljs-comment">// 左、根遍历完了。转向右子树</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">IsEmpty</span>(ans))&#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%4d&quot;</span>,<span class="hljs-built_in">Pop</span>(ans));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二</strong>：</p><p>​由于我们希望的是三次访问某一结点后再将其输出，再前序遍历的非递归实现之中我们可以知道第二次访问时其第一次出现栈顶的时候，因此我们不妨进行如下操作：</p><ul><li>入栈时给每一个元素添加一次标记</li><li>出栈前查看元素标记：如果存在标记则抹去，不存在则弹出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder2</span><span class="hljs-params">(BinTree *root)</span>    <span class="hljs-comment">//非递归后序遍历</span></span><br><span class="hljs-function"></span>&#123;<br>    stack&lt;BTNode*&gt; s;<br>    BinTree *p=root;<br>    BTNode *temp;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>||!s.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)              <span class="hljs-comment">//沿左子树一直往下搜索，直至出现没有左子树的结点</span><br>        &#123;<br>            BTNode *btn=(BTNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(BTNode));<br>            btn-&gt;btnode=p;<br>            btn-&gt;isFirst=<span class="hljs-literal">true</span>;<br>            s.<span class="hljs-built_in">push</span>(btn);<br>            p=p-&gt;lchild;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            temp=s.<span class="hljs-built_in">top</span>();<br>            s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(temp-&gt;isFirst==<span class="hljs-literal">true</span>)     <span class="hljs-comment">//表示是第一次出现在栈顶</span><br>             &#123;<br>                temp-&gt;isFirst=<span class="hljs-literal">false</span>;<br>                s.<span class="hljs-built_in">push</span>(temp);<br>                p=temp-&gt;btnode-&gt;rchild;<br>            &#125;<br>            <span class="hljs-keyword">else</span>                        <span class="hljs-comment">//第二次出现在栈顶</span><br>             &#123;<br>                cout&lt;&lt;temp-&gt;btnode-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>                p=<span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法三</strong>：</p><ul><li>要保证根结点在左孩子和右孩子访问之后才能访问，因此对于任一结点P，先将其入栈。</li><li>如果P不存在左孩子和右孩子，则可以直接访问它；</li><li>或者P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了，则同样可以直接访问该结点。</li><li>若非上述两种情况，则将P的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根结点前面被访问。</li></ul><blockquote><p>对于判断左右孩子是否被访问，我们可以通过一个指针标记我们上一步进行的操作，如果当前操作的结点是上一次操作结点的父亲，则说明其左右儿子皆被访问过了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder3</span><span class="hljs-params">(BinTree *root)</span>     <span class="hljs-comment">//非递归后序遍历</span></span><br><span class="hljs-function"></span>&#123;<br>    stack&lt;BinTree*&gt; s;<br>    BinTree *cur;                      <span class="hljs-comment">//当前结点</span><br>    BinTree *pre=<span class="hljs-literal">NULL</span>;                 <span class="hljs-comment">//前一次访问的结点</span><br>    s.<span class="hljs-built_in">push</span>(root);<br>    <span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cur=s.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-keyword">if</span>((cur-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;cur-&gt;rchild==<span class="hljs-literal">NULL</span>)||<br>           (pre!=<span class="hljs-literal">NULL</span>&amp;&amp;(pre==cur-&gt;lchild||pre==cur-&gt;rchild)))<br>        &#123;<br>            cout&lt;&lt;cur-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//如果当前结点没有孩子结点或者孩子节点都已被访问过</span><br>              s.<span class="hljs-built_in">pop</span>();<br>            pre=cur;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;rchild!=<span class="hljs-literal">NULL</span>)<br>                s.<span class="hljs-built_in">push</span>(cur-&gt;rchild);<br>            <span class="hljs-keyword">if</span>(cur-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>                s.<span class="hljs-built_in">push</span>(cur-&gt;lchild);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方法二、三参考于：<ahref="https://www.cnblogs.com/SHERO-Vae/p/5800363.html">【经典面试题二】二叉树的递归与非递归遍历（前序、中序、后序）- SHERO_Vae - 博客园 (cnblogs.com)</a></p></blockquote><h5 id="层次序遍历">层次(序)遍历</h5><p>​二叉树遍历的一个核心问题是如何将二维结构线性化。在遍历过程中容易遇到访问一个孩子后另外孩子遗失的情况。因此我们需要使用一个存储结构保存暂时无法访问到的结点（堆栈、队列）。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010338505.png" alt="image-20221025010338505" style="zoom: 67%;" /></p><p><strong>队列实现</strong>：</p><ul><li><p>根节点入队，</p></li><li><p>执行循环：</p><ul><li>结点出队</li><li>访问该结点</li><li>其左右儿子依次入队</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrderTraversal</span><span class="hljs-params">(Bin Tree)</span></span>&#123;<br>    Queue Q;<br>    BinTree T;<br>    <span class="hljs-keyword">if</span>(!BT) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 树空，返回</span><br>    Q = <span class="hljs-built_in">CreatQueque</span>(MaxSize);<br>    <span class="hljs-built_in">Add</span>(Q,BT); <span class="hljs-comment">// 根节点入队</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">IsEmpty</span>(Q))&#123;<br>        T = <span class="hljs-built_in">pop</span>(Q); <span class="hljs-comment">// 取出队首结点</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,T-&gt;Data);<br>        <span class="hljs-keyword">if</span>(Tree-&gt;Left) <span class="hljs-built_in">Add</span>(Q,T-&gt;Left);<br>        <span class="hljs-keyword">if</span>(Tree-&gt;Right) <span class="hljs-built_in">Add</span>(Q,T-&gt;Right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小结">小结</h4><p>​容易发现，先中后序遍历的过程，遍历结点的路线是一样的，且每个结点都经过了三次，只是访问输出各结点的时机不同。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010352877.png" alt="image-20221025010352877" style="zoom:50%;" /></p><h3 id="二叉树完整代码">二叉树完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> emp -1</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Node *l;<br>    Node *r;<br>&#125;;<br><span class="hljs-comment">//以完全二叉树为例，即结点添加上到下左到右。此处保证树为完全二叉树且无空结点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tree</span>()<br>    &#123;<br>        Root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        Root-&gt;l = Root-&gt;r = <span class="hljs-literal">nullptr</span>;<br>    &#125;;<br><br>    <span class="hljs-function">Node *<span class="hljs-title">Creat_Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Node *newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        newNode-&gt;data = value;<br>        newNode-&gt;l = newNode-&gt;r = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> newNode;<br>    &#125;<br>    <span class="hljs-function">Node *<span class="hljs-title">Creat_Node</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        Node *newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        newNode-&gt;l = newNode-&gt;r = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> newNode;<br>    &#125;<br><br>    <span class="hljs-function">Node *<span class="hljs-title">GetRoot</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Root; &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Root-&gt;l == Root-&gt;r &amp;&amp; Root-&gt;l == <span class="hljs-literal">nullptr</span>; &#125;<br>    <span class="hljs-comment">// 建立完全二叉树，借助性质结点i的左儿子是2*i右儿子是2*i+1</span><br>    <span class="hljs-comment">// 由于结点编号以及左右儿子可以确定，因此我们可以使用DFS来进行树的建立</span><br>    <span class="hljs-comment">// 如果要建一般的树的话，需要将树补全为完全二叉树，空余部分记空，判断是需要新加条件 numbers[xxx] != emp</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatTree_DFS</span><span class="hljs-params">(Node *&amp;root, <span class="hljs-type">int</span> numbers[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> idx = <span class="hljs-number">1</span>)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-comment">// Node*&amp; 是指针的引用,idx代表第几个结点,len是总的结点个数</span><br>        <span class="hljs-keyword">if</span> (idx &lt;= len)<br>        &#123;<br>            root-&gt;data = numbers[idx - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (idx * <span class="hljs-number">2</span> &lt;= len &amp;&amp; numbers[idx * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] != emp)<br>            &#123;<br>                root-&gt;l = <span class="hljs-built_in">Creat_Node</span>();<br>                <span class="hljs-built_in">CreatTree_DFS</span>(root-&gt;l, numbers, len, idx * <span class="hljs-number">2</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (idx * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= len &amp;&amp; numbers[idx * <span class="hljs-number">2</span>] != emp)<br>            &#123;<br>                root-&gt;r = <span class="hljs-built_in">Creat_Node</span>();<br>                <span class="hljs-built_in">CreatTree_DFS</span>(root-&gt;r, numbers, len, idx * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">// 层序建树，上到下左到右编号为1~n</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatTree_Que</span><span class="hljs-params">(Node *&amp;root, <span class="hljs-type">int</span> numbers[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        queue&lt;Node *&gt; Q;<br>        Root-&gt;data = numbers[idx++];<br>        Q.<span class="hljs-built_in">push</span>(Root);<br>        <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            Node *T = Q.<span class="hljs-built_in">front</span>();<br>            Q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (idx &lt; len)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (numbers[idx] != emp)<br>                &#123;<br>                    T-&gt;l = <span class="hljs-built_in">Creat_Node</span>(numbers[idx]);<br>                    Q.<span class="hljs-built_in">push</span>(T-&gt;l);<br>                &#125;<br>                idx++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (idx &lt; len)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (numbers[idx] != emp)<br>                &#123;<br>                    T-&gt;r = <span class="hljs-built_in">Creat_Node</span>(numbers[idx]);<br>                    Q.<span class="hljs-built_in">push</span>(T-&gt;l);<br>                &#125;<br>                idx++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 树的遍历</span><br>    <span class="hljs-comment">// 前序</span><br>    <span class="hljs-comment">// 递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTree_DFS</span><span class="hljs-params">(Node *T)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>        <span class="hljs-keyword">if</span> (T-&gt;l)<br>            <span class="hljs-built_in">PreOrderTree_DFS</span>(T-&gt;l);<br>        <span class="hljs-keyword">if</span> (T-&gt;r)<br>            <span class="hljs-built_in">PreOrderTree_DFS</span>(T-&gt;r);<br>    &#125;<br>    <span class="hljs-comment">// 非递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;Node *&gt; S;<br>        Node *T = Root;<br>        <span class="hljs-keyword">while</span> (T || !S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span> (T)<br>            &#123; <span class="hljs-comment">// 一路向左压栈</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>                S.<span class="hljs-built_in">push</span>(T);<br>                T = T-&gt;l;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                T = S.<span class="hljs-built_in">top</span>();<br>                S.<span class="hljs-built_in">pop</span>();<br>                T = T-&gt;r;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-comment">// 递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTree_DFS</span><span class="hljs-params">(Node *T)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (T-&gt;l)<br>            <span class="hljs-built_in">InOrderTree_DFS</span>(T-&gt;l);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>        <span class="hljs-keyword">if</span> (T-&gt;r)<br>            <span class="hljs-built_in">InOrderTree_DFS</span>(T-&gt;r);<br>    &#125;<br>    <span class="hljs-comment">// 非递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;Node *&gt; S;<br>        Node *T = Root;<br>        <span class="hljs-keyword">while</span> (T || !S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span> (T)<br>            &#123; <span class="hljs-comment">// 一路向左压栈</span><br>                S.<span class="hljs-built_in">push</span>(T);<br>                T = T-&gt;l;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                T = S.<span class="hljs-built_in">top</span>();<br>                S.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>                T = T-&gt;r;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-comment">// 递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTree_DFS</span><span class="hljs-params">(Node *T)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (T-&gt;l)<br>            <span class="hljs-built_in">PostOrderTree_DFS</span>(T-&gt;l);<br>        <span class="hljs-keyword">if</span> (T-&gt;r)<br>            <span class="hljs-built_in">PostOrderTree_DFS</span>(T-&gt;r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>    &#125;<br>    <span class="hljs-comment">// 非递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;Node *&gt; S;<br>        Node *T = Root;<br>        stack&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">while</span> (T || !S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span> (T)<br>            &#123; <span class="hljs-comment">// 一路向右压栈</span><br>                S.<span class="hljs-built_in">push</span>(T);<br>                ans.<span class="hljs-built_in">push</span>(T-&gt;data);<br>                T = T-&gt;r;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                T = S.<span class="hljs-built_in">top</span>();<br>                S.<span class="hljs-built_in">pop</span>();<br>                T = T-&gt;l;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!ans.<span class="hljs-built_in">empty</span>())&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>,ans.<span class="hljs-built_in">top</span>());ans.<span class="hljs-built_in">pop</span>();&#125;<br>    &#125;<br>    <span class="hljs-comment">// 层序遍历</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">IsEmpty</span>())<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 树空</span><br><br>        queue&lt;Node *&gt; Q;<br>        Q.<span class="hljs-built_in">push</span>(Root);<br>        Node *T = Root;<br>        <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            T = Q.<span class="hljs-built_in">front</span>();<br>            Q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>            <span class="hljs-keyword">if</span> (T-&gt;l)<br>                Q.<span class="hljs-built_in">push</span>(T-&gt;l);<br>            <span class="hljs-keyword">if</span> (T-&gt;r)<br>                Q.<span class="hljs-built_in">push</span>(T-&gt;r);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> num;<br>    Node *Root;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Tree tree;<br>    Node *root = tree.<span class="hljs-built_in">GetRoot</span>();<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>&#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">11</span>;<br>    tree.<span class="hljs-built_in">CreatTree_DFS</span>(root, a, len);<br>    cout &lt;&lt; <span class="hljs-string">&quot;先序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PreOrderTree_DFS</span>(root); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;非递归先序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PreOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;中序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">InOrderTree_DFS</span>(root); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;非递归中序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">InOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;后序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PostOrderTree_DFS</span>(root); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;非递归后序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PostOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;层序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">LevelOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他树形结构">其他树形结构</h2><h3 id="二叉搜索树">二叉搜索树</h3><h3 id="二叉平衡树">二叉平衡树</h3><h3 id="字典树">字典树</h3><h3 id="红黑树">红黑树</h3><h3 id="主席树">主席树</h3><h3 id="线段树">线段树</h3><h3 id="哈夫曼树">哈夫曼树</h3><h3 id="并查集">并查集</h3><h4 id="定义">定义</h4><blockquote><p>​并查集是一种树型的数据结构，常用于处理一些不相交集合的合并及查询问题（即所谓的并、查）。比如说，我们可以用并查集来判断一个森林中有几棵树、某个节点是否属于某棵树等。</p><p>​并查集的主要作用是<strong>求连通分支数</strong>（如果一个图中所有点都存在可达关系（直接或间接相连），则此图的连通分支数为1；如果此图有两大各自全部可达，则此图的连通分支数为2……）</p></blockquote><h4 id="思路">思路</h4><ul><li>所有结点初始祖先为自己</li><li>find（x） 寻找x的祖先</li><li>join（x，y）将x，y并到一堆（令其中一个作为另一个的双亲）</li></ul><h4 id="码">码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 100</span><br><span class="hljs-type">int</span> Ppre[MAXN];<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(pre[i]=i;        <span class="hljs-comment">//存放每个结点的结点（或双亲结点）</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 查</span><br><span class="hljs-type">int</span> <span class="hljs-built_in">find</span>(<span class="hljs-type">int</span> x)<br>&#123;<br><span class="hljs-keyword">while</span>(pre[x] != x)<span class="hljs-comment">// </span><br>x = pre[x];<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// 并</span><br><span class="hljs-type">void</span> <span class="hljs-built_in">join</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)                     <br>&#123;<br>    <span class="hljs-type">int</span> fx=<span class="hljs-built_in">find</span>(x), fy=<span class="hljs-built_in">find</span>(y);            <br>    <span class="hljs-keyword">if</span>(fx != fy)                           <br>        pre[fx]=fy;                        <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="多叉树">多叉树</h3><h2 id="图">图</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深度学习之初识卷积神经网络(CNN)</title>
    <link href="/2022/10/25/%E5%88%9D%E8%AF%86%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/10/25/%E5%88%9D%E8%AF%86%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p>有点难度，看我心情写不写，略略略。</p><h1 id="啊卷积卷卷麻了">啊，卷积！“卷”！！“卷麻了”！！！</h1><figure><imgsrc="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/244c4f3e1d1719dc7c796998d179b3c.jpg"alt="244c4f3e1d1719dc7c796998d179b3c" /><figcaptionaria-hidden="true">244c4f3e1d1719dc7c796998d179b3c</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>卷积神经网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>卷积神经网络</tag>
      
      <tag>CNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2022/10/25/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2022/10/25/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h4 id="定义">定义</h4><p>​并查集是一种树型的数据结构，常用于处理一些不相交集合的合并及查询问题（即所谓的并、查）。例如，我们可以用并查集来判断一个森林中有几棵树、某个节点是否属于某棵树等。</p><p>​并查集的主要作用是<strong>求连通分支数</strong>（如果一个图中所有点都存在可达关系（直接或间接相连），则此图的连通分支数为1；如果此图有两大各自全部可达，则此图的连通分支数为2……）</p><h4 id="思路">思路</h4><ul><li>所有结点初始祖先为自己</li><li>find（x） 寻找x的祖先</li><li>join（x，y）将x，y并到一堆（令其中一个作为另一个的双亲）</li></ul><h4 id="码">码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 100</span><br><span class="hljs-type">int</span> Ppre[MAXN];<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(pre[i]=i;        <span class="hljs-comment">//存放每个结点的结点（或双亲结点）</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 查</span><br><span class="hljs-type">int</span> <span class="hljs-built_in">find</span>(<span class="hljs-type">int</span> x)<br>&#123;<br><span class="hljs-keyword">while</span>(pre[x] != x)<span class="hljs-comment">// </span><br>x = pre[x];<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// 并</span><br><span class="hljs-type">void</span> <span class="hljs-built_in">join</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)                     <br>&#123;<br>    <span class="hljs-type">int</span> fx=<span class="hljs-built_in">find</span>(x), fy=<span class="hljs-built_in">find</span>(y);            <br>    <span class="hljs-keyword">if</span>(fx != fy)                           <br>        pre[fx]=fy;                        <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="section"></h3>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树与二叉树</title>
    <link href="/2022/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="树的基本概念">树的基本概念</h3><ul><li>子树不相交</li><li>除根结点外，每个结点有且仅有一个父节点</li><li>一个n个结点的树有n-1条边</li></ul><p><strong>结点的度</strong>： 结点的子树个数。</p><p><strong>树的度</strong>： 所有结点中最大度数。</p><p><strong>叶子结点</strong>: 度为0的结点。</p><p><strong>父结点</strong>： 有子树的结点是其子树根节点的父结点。</p><p><strong>子结点</strong>： 与父结点对应。</p><p><strong>兄弟结点</strong>： 具有同一父亲的结点。</p><p><strong>路径与路径长度</strong>：一个结点到另一个结点的序列叫做路径。其包含的边数叫做长度。</p><p><strong>祖先结点</strong>：沿树根到某一结点路径上的所有结点都是该节点的祖先结点。</p><p><strong>子孙结点</strong>： 与祖先结点对应。</p><p><strong>节点的层次</strong>：规定根结点在第一层，往后任意结点层数都是其父结点层数+1。</p><p><strong>树的深度</strong>： 所有结点的最大层次。</p><h3 id="树的表示">树的表示</h3><p>对于一般的树(以三叉树为例)，如果有n个结点的话那么总共产生n-1条边，但于此同时，会有3n-(n-1)个指针域为空，造成空间的极大浪费。因此我们通常采用以下方法改进树的表示。</p><h4 id="儿子兄弟表示法">儿子兄弟表示法</h4><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20220908183629440.png" alt="儿子兄弟表示法示意图" style="zoom:33%;" /></p><blockquote><p>容易发现，采用这种方法以后，其形状酷似二叉树，但却能够表示一般的多叉树。也就意味着我们可以通过二叉树的形式研究最大部分树的性质。</p></blockquote><h4 id="双亲表示法">双亲表示法</h4><h4 id="孩子表示法">孩子表示法</h4><h3 id="二叉树">二叉树</h3><h4 id="二叉树的基本形态形式">二叉树的基本形态形式</h4><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010155982.png" alt="五种二叉树的基本形态" style="zoom:33%;" /></p><blockquote><p>注意： 完全二叉树最后一层一定是要左到右排中间不留空。</p></blockquote><h4 id="完全二叉树的性质特点">完全二叉树的性质特点</h4><ul><li>第<span class="math inline">\(i\)</span>层最大结点数为<spanclass="math inline">\(2^{i-1},i \geq 1\)</span></li><li>深度为<spanclass="math inline">\(k\)</span>的二叉树最大结点数为<spanclass="math inline">\(2^k-1,k \geq 1\)</span></li><li>对于以层序顺序存储的二叉树而言，第<spanclass="math inline">\(i\)</span>个结点的左结点为<spanclass="math inline">\(2\times i\)</span>,右节点为 <spanclass="math inline">\(2\times i+1\)</span></li><li>对于任何非空二叉树，<spanclass="math inline">\(n_0,n_1,n_2\)</span>分别表示度为<spanclass="math inline">\(0,1,2\)</span>的结点，那么存在关系:<spanclass="math inline">\(n_0 = n_2 + 1\)</span></li><li>二叉树与树是两种不同的数据结构：树的儿子是有序的<spanclass="math inline">\((1、2、3、\cdots)\)</span>,而二叉树的儿子仅有左右之分。</li></ul><h4 id="二叉树的存储结构">二叉树的存储结构</h4><h5 id="顺序存储结构">顺序存储结构</h5><p><strong>完全二叉树</strong>：</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010211079.png" alt="完全二叉树的特性" style="zoom:50%;" /></p><p>​但对于一般的二叉树，我们可以将其补全成完全二叉树进行存储，但相应的，会造成大量的<strong>空间浪费</strong>。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010221103.png" alt="补全一般二叉树示意图" style="zoom:33%;" /></p><h5 id="链式存储结构">链式存储结构</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010235442.png" alt="二叉链表的结点形式" style="zoom: 33%;" /></p><h4 id="二叉树的四种遍历方式">二叉树的四种遍历方式</h4><h5 id="先序遍历-根---左---右">先序遍历 (根 -&gt; 左 -&gt; 右)</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010248743.png" alt="二叉树的先序遍历" style="zoom:50%;" /></p><p><strong>递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-keyword">if</span>(BT)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,BT-&gt;Data); <span class="hljs-comment">// 可换成其他操作</span><br><span class="hljs-built_in">PreOrderTraversal</span>(BT-&gt;left);<br><span class="hljs-built_in">PreOrderTraversal</span>(BT-&gt;right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T = BT;<br>    Stack S = <span class="hljs-built_in">CreatStack</span>(MaxSize)<br>    <span class="hljs-keyword">while</span> (T || !<span class="hljs-built_in">IsEmpty</span>(S))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (T) <span class="hljs-comment">// 一路向左压栈</span><br>        &#123;<br>           <span class="hljs-built_in">Push</span>(S,T);<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, T -&gt; Data)<br>           T = T -&gt; left;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsEmpty</span>(S))<br>        &#123;<br>            T = <span class="hljs-built_in">Pop</span>(S); <span class="hljs-comment">//没有左子节点，就出栈</span><br>            T = T -&gt; Right; <span class="hljs-comment">// 左、根遍历完了。转向右子树</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="中序遍历-左---根---右">中序遍历 (左 -&gt; 根 -&gt; 右)</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010302033.png" alt="二叉树的中序遍历" style="zoom: 50%;" /></p><p><strong>递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-keyword">if</span>(BT)&#123;<br><span class="hljs-built_in">InOrderTraversal</span>(BT-&gt;left);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,BT-&gt;Data); <span class="hljs-comment">// 可换成其他操作</span><br><span class="hljs-built_in">InOrderTraversal</span>(BT-&gt;right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal3</span><span class="hljs-params">(BinTree BT)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T = BT;<br>    Stack S = <span class="hljs-built_in">CreatStack</span>(MaxSize)<br>    <span class="hljs-keyword">while</span> (T || !<span class="hljs-built_in">IsEmpty</span>(S))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (T) <span class="hljs-comment">// 一路向左压栈</span><br>        &#123;<br>           <span class="hljs-built_in">Push</span>(S,T);<br>           T = T -&gt; left;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsEmpty</span>(S))<br>        &#123;<br>            T = <span class="hljs-built_in">Pop</span>(S); <span class="hljs-comment">//没有左子结点，就出栈</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, T -&gt; Data)<br>            T = T -&gt; Right; <span class="hljs-comment">// 左子树遍历完了,转向右子树</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="后序遍历左---右--根">后序遍历(左 -&gt; 右-&gt; 根 )</h5><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010320504.png" alt="二叉树的后序遍历" style="zoom:50%;" /></p><p><strong>递归实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-keyword">if</span>(BT)&#123;<br><span class="hljs-built_in">PostOrderTraversal</span>(BT-&gt;left);<br><span class="hljs-built_in">PostOrderTraversal</span>(BT-&gt;right);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,BT-&gt;Data); <span class="hljs-comment">// 可换成其他操作</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><p>​从前、中序遍历的非递归实现可以知道，我们通过一个栈只能完成每个结点的两次访问。但对于后续遍历来说，我们对一个结点一定要进行三次访问左、根、右后才能进行输出。也因此操作起来比较复杂，题主结合网上资源给出三种非递归实现方式。</p><p><strong>方法一</strong>：</p><p>假设，有如下一颗树</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025175203503.png" alt="示例" style="zoom:50%;" /></p><p>后序遍历为： 8 9 4 10 11 5 2 6 7 3 1</p><p>逆后续遍历为：1 3 7 6 2 6 11 10 4 9 8</p><p>观察可得，其逆后序遍历为该树通过根-&gt;右-&gt;左的次序进行“先序”遍历。因此我们可以按此先序遍历的方法遍历一遍得到你逆后序遍历再输出即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;Node *&gt; S;<br>        Node *T = Root;<br>        stack&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">while</span> (T || !S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span> (T)<br>            &#123; <span class="hljs-comment">// 一路向右压栈</span><br>                S.<span class="hljs-built_in">push</span>(T);<br>                ans.<span class="hljs-built_in">push</span>(T-&gt;data);<br>                T = T-&gt;r;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                T = S.<span class="hljs-built_in">top</span>();<br>                S.<span class="hljs-built_in">pop</span>();<br>                T = T-&gt;l; <span class="hljs-comment">// 右子树遍历完成，转向左子树</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!ans.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>,ans.<span class="hljs-built_in">top</span>());<br>            ans.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>方法二</strong>：</p><p>​由于我们希望的是三次访问某一结点后再将其输出，再前序遍历的非递归实现之中我们可以知道第二次访问时其第一次出现栈顶的时候，因此我们不妨进行如下操作：</p><ul><li>入栈时给每一个元素添加一次标记</li><li>出栈前查看元素标记：如果存在标记则抹去，不存在则弹出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder2</span><span class="hljs-params">(BinTree *root)</span>    <span class="hljs-comment">//非递归后序遍历</span></span><br><span class="hljs-function"></span>&#123;<br>    stack&lt;BTNode*&gt; s;<br>    BinTree *p=root;<br>    BTNode *temp;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>||!s.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)              <span class="hljs-comment">//沿左子树一直往下搜索，直至出现没有左子树的结点</span><br>        &#123;<br>            BTNode *btn=(BTNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(BTNode));<br>            btn-&gt;btnode=p;<br>            btn-&gt;isFirst=<span class="hljs-literal">true</span>;<br>            s.<span class="hljs-built_in">push</span>(btn);<br>            p=p-&gt;lchild;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            temp=s.<span class="hljs-built_in">top</span>();<br>            s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(temp-&gt;isFirst==<span class="hljs-literal">true</span>)     <span class="hljs-comment">//表示是第一次出现在栈顶</span><br>             &#123;<br>                temp-&gt;isFirst=<span class="hljs-literal">false</span>;<br>                s.<span class="hljs-built_in">push</span>(temp);<br>                p=temp-&gt;btnode-&gt;rchild;<br>            &#125;<br>            <span class="hljs-keyword">else</span>                        <span class="hljs-comment">//第二次出现在栈顶</span><br>             &#123;<br>                cout&lt;&lt;temp-&gt;btnode-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>                p=<span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法三</strong>：</p><ul><li>要保证根结点在左孩子和右孩子访问之后才能访问，因此对于任一结点P，先将其入栈。</li><li>如果P不存在左孩子和右孩子，则可以直接访问它；</li><li>或者P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了，则同样可以直接访问该结点。</li><li>若非上述两种情况，则将P的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根结点前面被访问。</li></ul><blockquote><p>对于判断左右孩子是否被访问，我们可以通过一个指针标记我们上一步进行的操作，如果当前操作的结点是上一次操作结点的父亲，则说明其左右儿子皆被访问过了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder3</span><span class="hljs-params">(BinTree *root)</span>     <span class="hljs-comment">//非递归后序遍历</span></span><br><span class="hljs-function"></span>&#123;<br>    stack&lt;BinTree*&gt; s;<br>    BinTree *cur;                      <span class="hljs-comment">//当前结点</span><br>    BinTree *pre=<span class="hljs-literal">NULL</span>;                 <span class="hljs-comment">//前一次访问的结点</span><br>    s.<span class="hljs-built_in">push</span>(root);<br>    <span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cur=s.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-keyword">if</span>((cur-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;cur-&gt;rchild==<span class="hljs-literal">NULL</span>)||<br>           (pre!=<span class="hljs-literal">NULL</span>&amp;&amp;(pre==cur-&gt;lchild||pre==cur-&gt;rchild)))<br>        &#123;<br>            cout&lt;&lt;cur-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//如果当前结点没有孩子结点或者孩子节点都已被访问过</span><br>              s.<span class="hljs-built_in">pop</span>();<br>            pre=cur;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;rchild!=<span class="hljs-literal">NULL</span>)<br>                s.<span class="hljs-built_in">push</span>(cur-&gt;rchild);<br>            <span class="hljs-keyword">if</span>(cur-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>                s.<span class="hljs-built_in">push</span>(cur-&gt;lchild);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方法二、三参考于：<ahref="https://www.cnblogs.com/SHERO-Vae/p/5800363.html">【经典面试题二】二叉树的递归与非递归遍历（前序、中序、后序）- SHERO_Vae - 博客园 (cnblogs.com)</a></p></blockquote><h5 id="层次序遍历">层次(序)遍历</h5><p>​二叉树遍历的一个核心问题是如何将二维结构线性化。在遍历过程中容易遇到访问一个孩子后另外孩子遗失的情况。因此我们需要使用一个存储结构保存暂时无法访问到的结点（堆栈、队列）。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010338505.png" alt="二叉树的层序遍历" style="zoom: 67%;" /></p><p><strong>队列实现</strong>：</p><ul><li><p>根节点入队，</p></li><li><p>执行循环：</p><ul><li>结点出队</li><li>访问该结点</li><li>其左右儿子依次入队</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br>    Queue Q;<br>    BinTree T;<br>    <span class="hljs-keyword">if</span>(!BT) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 树空，返回</span><br>    Q = <span class="hljs-built_in">CreatQueque</span>(MaxSize);<br>    <span class="hljs-built_in">Add</span>(Q,BT); <span class="hljs-comment">// 根节点入队</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">IsEmpty</span>(Q))&#123;<br>        T = <span class="hljs-built_in">pop</span>(Q); <span class="hljs-comment">// 取出队首结点</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,T-&gt;Data);<br>        <span class="hljs-keyword">if</span>(T-&gt;Left) <span class="hljs-built_in">Add</span>(Q,T-&gt;Left);<br>        <span class="hljs-keyword">if</span>(T-&gt;Right) <span class="hljs-built_in">Add</span>(Q,T-&gt;Right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小结">小结</h4><p>​容易发现，先中后序遍历的过程，遍历结点的路线是一样的，且每个结点都经过了三次，只是访问输出各结点的时机不同。</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/image-20221025010352877.png" alt="二叉树的遍历路线" style="zoom:50%;" /></p><h3 id="二叉树完整代码">二叉树完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> emp -1</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Node *l;<br>    Node *r;<br>&#125;;<br><span class="hljs-comment">//以完全二叉树为例，即结点添加上到下左到右。此处保证树为完全二叉树且无空结点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tree</span>()<br>    &#123;<br>        Root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        Root-&gt;l = Root-&gt;r = <span class="hljs-literal">nullptr</span>;<br>    &#125;;<br><br>    <span class="hljs-function">Node *<span class="hljs-title">Creat_Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Node *newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        newNode-&gt;data = value;<br>        newNode-&gt;l = newNode-&gt;r = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> newNode;<br>    &#125;<br>    <span class="hljs-function">Node *<span class="hljs-title">Creat_Node</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        Node *newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>        newNode-&gt;l = newNode-&gt;r = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> newNode;<br>    &#125;<br><br>    <span class="hljs-function">Node *<span class="hljs-title">GetRoot</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Root; &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Root-&gt;l == Root-&gt;r &amp;&amp; Root-&gt;l == <span class="hljs-literal">nullptr</span>; &#125;<br>    <span class="hljs-comment">// 建立完全二叉树，借助性质结点i的左儿子是2*i右儿子是2*i+1</span><br>    <span class="hljs-comment">// 由于结点编号以及左右儿子可以确定，因此我们可以使用DFS来进行树的建立</span><br>    <span class="hljs-comment">// 如果要建一般的树的话，需要将树补全为完全二叉树，空余部分记空，判断是需要新加条件 numbers[xxx] != emp</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatTree_DFS</span><span class="hljs-params">(Node *&amp;root, <span class="hljs-type">int</span> numbers[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> idx = <span class="hljs-number">1</span>)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-comment">// Node*&amp; 是指针的引用,idx代表第几个结点,len是总的结点个数</span><br>        <span class="hljs-keyword">if</span> (idx &lt;= len)<br>        &#123;<br>            root-&gt;data = numbers[idx - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (idx * <span class="hljs-number">2</span> &lt;= len &amp;&amp; numbers[idx * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] != emp)<br>            &#123;<br>                root-&gt;l = <span class="hljs-built_in">Creat_Node</span>();<br>                <span class="hljs-built_in">CreatTree_DFS</span>(root-&gt;l, numbers, len, idx * <span class="hljs-number">2</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (idx * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= len &amp;&amp; numbers[idx * <span class="hljs-number">2</span>] != emp)<br>            &#123;<br>                root-&gt;r = <span class="hljs-built_in">Creat_Node</span>();<br>                <span class="hljs-built_in">CreatTree_DFS</span>(root-&gt;r, numbers, len, idx * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;;<br>    <br>    <span class="hljs-comment">// 层序建树，上到下左到右编号为1~n</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatTree_Que</span><span class="hljs-params">(Node *&amp;root, <span class="hljs-type">int</span> numbers[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        queue&lt;Node *&gt; Q;<br>        Root-&gt;data = numbers[idx++];<br>        Q.<span class="hljs-built_in">push</span>(Root);<br>        <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            Node *T = Q.<span class="hljs-built_in">front</span>();<br>            Q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (idx &lt; len)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (numbers[idx] != emp)<br>                &#123;<br>                    T-&gt;l = <span class="hljs-built_in">Creat_Node</span>(numbers[idx]);<br>                    Q.<span class="hljs-built_in">push</span>(T-&gt;l);<br>                &#125;<br>                idx++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (idx &lt; len)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (numbers[idx] != emp)<br>                &#123;<br>                    T-&gt;r = <span class="hljs-built_in">Creat_Node</span>(numbers[idx]);<br>                    Q.<span class="hljs-built_in">push</span>(T-&gt;r);<br>                &#125;<br>                idx++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 树的遍历</span><br>    <span class="hljs-comment">// 前序</span><br>    <span class="hljs-comment">// 递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTree_DFS</span><span class="hljs-params">(Node *T)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>        <span class="hljs-keyword">if</span> (T-&gt;l)<br>            <span class="hljs-built_in">PreOrderTree_DFS</span>(T-&gt;l);<br>        <span class="hljs-keyword">if</span> (T-&gt;r)<br>            <span class="hljs-built_in">PreOrderTree_DFS</span>(T-&gt;r);<br>    &#125;<br>    <span class="hljs-comment">// 非递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;Node *&gt; S;<br>        Node *T = Root;<br>        <span class="hljs-keyword">while</span> (T || !S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span> (T)<br>            &#123; <span class="hljs-comment">// 一路向左压栈</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>                S.<span class="hljs-built_in">push</span>(T);<br>                T = T-&gt;l;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                T = S.<span class="hljs-built_in">top</span>();<br>                S.<span class="hljs-built_in">pop</span>();<br>                T = T-&gt;r;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-comment">// 递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTree_DFS</span><span class="hljs-params">(Node *T)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (T-&gt;l)<br>            <span class="hljs-built_in">InOrderTree_DFS</span>(T-&gt;l);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>        <span class="hljs-keyword">if</span> (T-&gt;r)<br>            <span class="hljs-built_in">InOrderTree_DFS</span>(T-&gt;r);<br>    &#125;<br>    <span class="hljs-comment">// 非递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;Node *&gt; S;<br>        Node *T = Root;<br>        <span class="hljs-keyword">while</span> (T || !S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span> (T)<br>            &#123; <span class="hljs-comment">// 一路向左压栈</span><br>                S.<span class="hljs-built_in">push</span>(T);<br>                T = T-&gt;l;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                T = S.<span class="hljs-built_in">top</span>();<br>                S.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>                T = T-&gt;r;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-comment">// 递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTree_DFS</span><span class="hljs-params">(Node *T)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (T-&gt;l)<br>            <span class="hljs-built_in">PostOrderTree_DFS</span>(T-&gt;l);<br>        <span class="hljs-keyword">if</span> (T-&gt;r)<br>            <span class="hljs-built_in">PostOrderTree_DFS</span>(T-&gt;r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>    &#125;<br>    <span class="hljs-comment">// 非递归实现</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;Node *&gt; S;<br>        Node *T = Root;<br>        stack&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">while</span> (T || !S.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span> (T)<br>            &#123; <span class="hljs-comment">// 一路向右压栈</span><br>                S.<span class="hljs-built_in">push</span>(T);<br>                ans.<span class="hljs-built_in">push</span>(T-&gt;data);<br>                T = T-&gt;r;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!S.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                T = S.<span class="hljs-built_in">top</span>();<br>                S.<span class="hljs-built_in">pop</span>();<br>                T = T-&gt;l;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!ans.<span class="hljs-built_in">empty</span>())&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>,ans.<span class="hljs-built_in">top</span>());ans.<span class="hljs-built_in">pop</span>();&#125;<br>    &#125;<br>    <span class="hljs-comment">// 层序遍历</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrderTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">IsEmpty</span>())<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 树空</span><br><br>        queue&lt;Node *&gt; Q;<br>        Q.<span class="hljs-built_in">push</span>(Root);<br>        Node *T = Root;<br>        <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            T = Q.<span class="hljs-built_in">front</span>();<br>            Q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, T-&gt;data);<br>            <span class="hljs-keyword">if</span> (T-&gt;l)<br>                Q.<span class="hljs-built_in">push</span>(T-&gt;l);<br>            <span class="hljs-keyword">if</span> (T-&gt;r)<br>                Q.<span class="hljs-built_in">push</span>(T-&gt;r);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> num;<br>    Node *Root;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Tree tree;<br>    Node *root = tree.<span class="hljs-built_in">GetRoot</span>();<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>&#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">11</span>;<br>    tree.<span class="hljs-built_in">CreatTree_DFS</span>(root, a, len);<br>    cout &lt;&lt; <span class="hljs-string">&quot;先序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PreOrderTree_DFS</span>(root); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;非递归先序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PreOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;中序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">InOrderTree_DFS</span>(root); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;非递归中序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">InOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;后序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PostOrderTree_DFS</span>(root); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;非递归后序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">PostOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;层序遍历：&quot;</span> &lt;&lt; endl;<br>    tree.<span class="hljs-built_in">LevelOrderTree</span>(); cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表</title>
    <link href="/2022/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2022/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>临时起意想要将过往的学习笔记整理为博文的形式记录下来，有许多内容会存在欠缺，后续会慢慢不上。</p></blockquote><h3 id="数据结构基本概念">数据结构基本概念</h3><p><strong>数据</strong>：数据可分类为整数、实数等<strong>数值数据</strong>，和文字、声音、图形、图像等<strong>非数值数据</strong>。</p><p><strong>数据元素</strong>：数据元素是数据的基本单位，通常作为一个整体进行处理。构成数据元素的最小单位称为<strong>数据项</strong>，并且数据元素通常具有相同的数据项。</p><blockquote><p>例如：一个学生是一个数据元素，学生的学号、性别、出生日期等是构成该数据元素的数据项。</p></blockquote><p><strong>数据结构</strong>：数据结构是指相互之间存在一定关系的元素集合。按照视点的不同，数据结构可分为<strong>逻辑结构</strong>和<strong>存储结构</strong>两类。</p><blockquote><p>强调：数据元素是数据结构的最小单位。</p></blockquote><p><strong>数据的逻辑结构</strong>：指数据元素之间的逻辑关系，根据元素之间的逻辑关系的不同，数据结构可分为四类。</p><ul><li><strong>集合元素</strong>：除“同属一个集合”外，数据间无关系。</li><li><strong>线性结构</strong>：一对一</li><li><strong>树结构</strong>：一对多</li><li><strong>图结构</strong>：多对多</li></ul><p><strong>数据的存储结构</strong>：也称物理结构，是数据及其逻辑形式在计算机中的表示（也称映像）。可分为顺序存储结构和链式存储结构。</p><ul><li><strong>顺序存储结构</strong>：用一组连续的存储单元，依次存储数据元素</li><li><strong>链式存储结构</strong>：用一组任意的存储单元存储数据元素，数据元素之间的关系用指针来表示。</li></ul><p><strong>抽象数据类型</strong>：(abstract datatype,ADT)是一个数据模型以及定义在该模型上一组操作的总称。一个ADT帝国一不涉及具体实现细节，形式上可繁可简。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erlang">ADT 抽象数据类型名<br>DataMode1<br>数据元素之间的逻辑关系的定义<br>Operation<br>操作<span class="hljs-number">1</span>：<br>输入：<br>功能：<br>输出：<br>    操作<span class="hljs-number">2</span>：<br>    .<br>    .<br><span class="hljs-keyword">end</span>ADT<br><br></code></pre></td></tr></table></figure><h2 id="线性表">线性表</h2><h3 id="顺序存储结构">顺序存储结构</h3><h3 id="链式存储结构单链表为例">链式存储结构(单链表为例)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">//设置结点</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    T date;<br>    Node&lt;T&gt;* next;<br>&#125;;<br><br><span class="hljs-comment">// 创建链表类</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chained_linear_list</span><br>&#123;   <br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Chained_linear_list</span>();<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, T x)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find_index</span><span class="hljs-params">(T value)</span></span>;<br>        <span class="hljs-function">T <span class="hljs-title">Find_value</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>;  <span class="hljs-comment">//查找第一个</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete_value</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>; <span class="hljs-comment">//删除第i个结点</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete_index</span><span class="hljs-params">(T value)</span></span>;   <span class="hljs-comment">//删除第一个值为value的元素</span><br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">private</span>:<br>        Node&lt;T&gt;* head;<br>&#125;;<br><br><span class="hljs-comment">// 创建新链表</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Chained_linear_list</span>()&#123;<br>    head = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>    rear-&gt;next = head -&gt; next = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取链表长度</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">int</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Length</span>()&#123;<br>    <span class="hljs-keyword">if</span>(head -&gt; next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    Node&lt;T&gt;* s = head-&gt;next;<br>    <span class="hljs-keyword">while</span>(s != <span class="hljs-literal">nullptr</span>)&#123;<br>        j++;<br>        s = s-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>    <br>&#125;<br><br><span class="hljs-comment">// 判断链表是否为空</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">bool</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">IsEmpty</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Length</span>() == <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 返回元素对应的下标，没找到返回-1</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">int</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Find_index</span>(T x)&#123; <span class="hljs-comment">//返回下标 0~n,-1代表元素不存在或链表为空</span><br>    <span class="hljs-keyword">if</span>(head -&gt; next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    Node&lt;T&gt;* s = head -&gt; next;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s != <span class="hljs-literal">nullptr</span> &amp;&amp; s-&gt;date != x)&#123;<br>        s = s -&gt; next;<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> j;<br>    <br>&#125;<br><br><span class="hljs-comment">// 返回对应下标所表示的元素，没找到返回-1</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>T Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Find_value</span>(<span class="hljs-type">int</span> x)&#123; <span class="hljs-comment">// 返回下标位置x的元素值</span><br>    <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Length</span>() || x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 查找的下标大于数组长度，表明输入有误</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    Node&lt;T&gt;* s = head -&gt; next;<br>    <span class="hljs-keyword">while</span>(j &lt; x)&#123;<br>        j++;<br>        s = s-&gt;next;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> s-&gt;date;<br>&#125;<br><br><span class="hljs-comment">// 在指定元素位置插入元素</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">int</span> x,T value)&#123;<br><br>    Node&lt;T&gt;* s = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">IsEmpty</span>())&#123;<br>        s-&gt;date = value,<br>        s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)&#123;     <br>        s -&gt; next = head -&gt; next;<br>        head -&gt; next = s;<br>        s -&gt; date = value;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        s = head -&gt; next;<br>        <span class="hljs-keyword">while</span>(j &lt; x - <span class="hljs-number">1</span> &amp;&amp; s != <span class="hljs-literal">nullptr</span>)&#123;<br>            s = s -&gt; next;<br>            j++;<br>        &#125;<br>        Node&lt;T&gt;* p = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>        p -&gt; date = value;<br>        p -&gt; next = s -&gt; next;<br>        s -&gt; next = p;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Delete_value</span>(<span class="hljs-type">int</span> index)&#123;<br>    Node&lt;T&gt; *s = head -&gt; next;<br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Length</span>()) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 只有一个</span><br>        head -&gt; next  = s -&gt; next;<br>        <span class="hljs-built_in">free</span>(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(j &lt; index <span class="hljs-number">-1</span>)&#123;<br>        j++;<br>        s = s -&gt; next;<br>    &#125;<br>    Node&lt;T&gt;* p = s -&gt; next;<br>    s -&gt; next  = p-&gt;next;<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> Chained_linear_list&lt;T&gt;::<span class="hljs-built_in">Delete_index</span>(T x)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">IsEmpty</span>()) <span class="hljs-keyword">return</span>;<br>    <br>    Node&lt;T&gt;* s = head -&gt; next;<br>    <span class="hljs-keyword">if</span>(s -&gt; date == x)&#123;<br>        head -&gt; next = s -&gt; next;<br>        <span class="hljs-built_in">free</span>(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">while</span>(s -&gt; next != <span class="hljs-literal">nullptr</span> &amp;&amp; s -&gt; next -&gt; date != x)<br>            s = s-&gt;next;<br>        <span class="hljs-keyword">if</span>(s -&gt; next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;T&gt; *p = s -&gt; next;<br>            s -&gt; next = p-&gt; next;<br>            <span class="hljs-built_in">free</span>(p);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Chained_linear_list&lt;<span class="hljs-type">int</span>&gt; *a = <span class="hljs-keyword">new</span> Chained_linear_list&lt;<span class="hljs-type">int</span>&gt;,*p = a;<br><br>    a -&gt; <span class="hljs-built_in">Insert</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>); <br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>() &lt;&lt; endl;<br>    a -&gt; <span class="hljs-built_in">Insert</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>); <br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>() &lt;&lt; endl;<br>    a -&gt; <span class="hljs-built_in">Insert</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>); <br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        cout &lt;&lt; p -&gt; <span class="hljs-built_in">Find_value</span>(i) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    a-&gt; <span class="hljs-built_in">Delete_index</span>(<span class="hljs-number">11</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        cout &lt;&lt; p -&gt; <span class="hljs-built_in">Find_value</span>(i) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <br>    &#125;<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; a-&gt;<span class="hljs-built_in">Length</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="其他链表结构">其他链表结构</h3><h4 id="双向链表">双向链表</h4><h4 id="循环链表">循环链表</h4><h4 id="十字链表">十字链表</h4><h3 id="栈">栈</h3><h4 id="单调栈">单调栈</h4><h3 id="队列">队列</h3><h4 id="循环队列">循环队列</h4><h4 id="单调队列">单调队列</h4><h4 id="双端队列">双端队列</h4><h3 id="字串">字串</h3>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性表</tag>
      
      <tag>栈</tag>
      
      <tag>队列</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双目视觉</title>
    <link href="/2022/10/25/%E5%8F%8C%E7%9B%AE%E8%A7%86%E8%A7%89%E4%B9%8B%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%92%8C%E5%9B%BE%E5%83%8F%E6%A0%A1%E6%AD%A3/"/>
    <url>/2022/10/25/%E5%8F%8C%E7%9B%AE%E8%A7%86%E8%A7%89%E4%B9%8B%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%92%8C%E5%9B%BE%E5%83%8F%E6%A0%A1%E6%AD%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本着开源共享的优良传统，本文的风格可能略显风骚随性，看官切莫怪责。</p><p>在写了在写了。感觉知识高大上，最后不还是各种调库？？刚刚起步，分享很杂，勿怪！！</p></blockquote><p>下面这篇博文利用python语言，搭建了双目三维重建系统，有码，可作为复现路线参考。值得说道的点是他的码风很清爽。</p><p><ahref="https://panjinquan.blog.csdn.net/article/details/121301896">(87条消息)双目三维重建系统(双目标定+立体校正+双目测距+点云显示)Python_AI吃大瓜的博客-CSDN博客_双目相机三维重建</a></p><p><strong>下文对双目视觉如何从二维走向三维做出了简单的阐释</strong>，文章通俗易懂，建议阅读作为项目开展基础。</p><p><ahref="https://www.cnblogs.com/dverdon/p/5609124.html">双目视觉几何框架详解- _木头人 - 博客园 (cnblogs.com)</a></p><p><strong>图像矫正码参考</strong></p><p><ahref="https://blog.csdn.net/qq_22059843/article/details/103400094">(87条消息)单、双目相机标定及畸变校正、立体矫正的python实现（含拍照程序）_逆光525的博客-CSDN博客_python校正图片</a></p><p><strong>相机标定参考</strong></p><p><ahref="https://www.cnblogs.com/zyly/p/9366080.html#_label3">第六节、双目视觉之相机标定- 大奥特曼打小怪兽 - 博客园 (cnblogs.com)</a></p><p><ahref="https://blog.csdn.net/qq_30234963/article/details/121908465">(87条消息)opencv进行双目标定以及极线校正python代码_不能改id好烦啊的博客-CSDN博客_opencv极线校正</a></p><p><strong>立体匹配参考</strong></p><p><ahref="https://blog.csdn.net/rs_lys/article/details/83302323?ops_request_misc=%7B%22request%5Fid%22%3A%22166686753116800180644248%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=166686753116800180644248&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~hot_rank-1-83302323-null-null.article_score_rank_blog&amp;utm_term=立体匹配&amp;spm=1018.2226.3001.4450">(87条消息)双目立体匹配步骤详解_李迎松~的博客-CSDN博客_双目立体匹配</a></p><p>这一块可能需要用CNN，那快速入门下pytorch吧~</p><p><a href="https://www.jianshu.com/p/889dbc684622">PyTorch 深度学习:60分钟快速入门 - 简书 (jianshu.com)</a></p><h3 id="相机标定图像矫正部分">相机标定+图像矫正部分</h3><p>本来想写点东西的，但“前人之述备矣”，又何必重复造轮子呢哈哈（偷懒</p><p><img src="https://typora-dx.oss-cn-guangzhou.aliyuncs.com/img/bf6946a27c6ae2808c1844b2ae1a4fb.jpg" alt="bf6946a27c6ae2808c1844b2ae1a4fb" style="zoom:33%;" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双目视觉</tag>
      
      <tag>相机标定</tag>
      
      <tag>图像校正</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一则通告</title>
    <link href="/2022/10/25/%E4%B8%80%E4%B8%AA%E9%80%9A%E7%9F%A5/"/>
    <url>/2022/10/25/%E4%B8%80%E4%B8%AA%E9%80%9A%E7%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>本着it区知识开源的优良传统，博主本人乐于记录分享自己在学习过程中的心得与体会。但考虑到本人不过是一只堪堪涉猎it大门的小白，资历尚浅，或多或少难免存在各方面上的错误，还望大家多多包涵。</p><p>由于方才因为兴趣使然建立博客记录学习，许多文章都是半成品，本大学牲会逐步完善，以求良好的浏览体验。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/25/hello-world/"/>
    <url>/2022/10/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
